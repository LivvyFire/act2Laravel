<?php

namespace App\Filament\Resources;

use App\Filament\Resources\BooksResource\Pages;
use App\Models\Books;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;

class BooksResource extends Resource
{
    protected static ?string $model = Books::class;

    // añadimos la estructuración:
    protected static ?int $navigationSort = 20;

    // añadimos los grupos
    public static function getNavigationGroup(): ?string
    {
        return __('BookStore'); // TODO: Change the autogenerated stub
    }

    public static function getLabel(): ?string
    {
        return __('Book'); // TODO: Change the autogenerated stub
    }

    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                // INTRODUCIR LAS IMÁGENES
                Forms\Components\FileUpload::make('image')
                ->label(__('Image'))
                ->image()
                ->maxSize(4096)
                ->placeholder(__('Image of product'))
                ->columnSpanFull(),
                Forms\Components\Grid::make()
                ->schema([
                    Forms\Components\TextInput::make('title')
                        ->columns(1)
                        ->required()
                        ->maxLength(30)
                        ->unique(static::getModel(), 'title', ignoreRecord: true)
                        ->label(__('Title'))
                        ->autofocus(),
                    Forms\Components\TextInput::make('author')
                        ->columns(1)
                        ->required()
                        ->maxLength(50)
                        ->unique(static::getModel(), 'author', ignoreRecord: true)
                        ->label(__('Author'))
                        ->autofocus(),
                    Forms\Components\TextInput::make('year_of_publication')
                        ->columns(1)
                        ->required()
                        ->maxLength(50)
                        ->unique(static::getModel(), 'year_of_publication', ignoreRecord: true)
                        ->label(__('Year of publication'))
                        ->autofocus(),
                    Forms\Components\Select::make('literary_genres_id')
                        ->relationship('literary_genres', 'name')
                        ->label(__('Literary Genre'))
                        ->searchable()
                        ->columns(1)


                ])->columns(3)
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\ImageColumn::make('image')
                ->label(__('Image')),
                Tables\Columns\TextColumn::make('title')
                ->label(__('Title'))
                ->searchable()
                ->sortable(),
                Tables\Columns\TextColumn::make('author')
                ->label(__('Author'))
                ->searchable(),
                Tables\Columns\TextColumn::make('year_of_publication')
                ->label(__('Year it was published')),
                Tables\Columns\TextColumn::make('literary_genres.name')
                ->label(__('Literary Genre'))
                ->searchable()
                ->sortable()
            ])
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->emptyStateActions([
                Tables\Actions\CreateAction::make(),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListBooks::route('/'),
            'create' => Pages\CreateBooks::route('/create'),
            'edit' => Pages\EditBooks::route('/{record}/edit'),
        ];
    }
}
